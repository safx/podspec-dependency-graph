!function(){"use strict";sigma.utils.pkg("sigma.webgl.edges"),sigma.webgl.edges.def={POINTS:6,ATTRIBUTES:7,addEdge:function(t,i,o,r,a,e,n){var l=(t[e+"size"]||1)/2,s=i[e+"x"],u=i[e+"y"],c=o[e+"x"],m=o[e+"y"],f=t.color;if(!f)switch(n("edgeColor")){case"source":f=i.color||n("defaultNodeColor");break;case"target":f=o.color||n("defaultNodeColor");break;default:f=n("defaultEdgeColor")}f=sigma.utils.floatColor(f),r[a++]=s,r[a++]=u,r[a++]=c,r[a++]=m,r[a++]=l,r[a++]=0,r[a++]=f,r[a++]=c,r[a++]=m,r[a++]=s,r[a++]=u,r[a++]=l,r[a++]=1,r[a++]=f,r[a++]=c,r[a++]=m,r[a++]=s,r[a++]=u,r[a++]=l,r[a++]=0,r[a++]=f,r[a++]=c,r[a++]=m,r[a++]=s,r[a++]=u,r[a++]=l,r[a++]=0,r[a++]=f,r[a++]=s,r[a++]=u,r[a++]=c,r[a++]=m,r[a++]=l,r[a++]=1,r[a++]=f,r[a++]=s,r[a++]=u,r[a++]=c,r[a++]=m,r[a++]=l,r[a++]=0,r[a++]=f},render:function(t,i,o,r){var a,e=t.getAttribLocation(i,"a_color"),n=t.getAttribLocation(i,"a_position1"),l=t.getAttribLocation(i,"a_position2"),s=t.getAttribLocation(i,"a_thickness"),u=t.getAttribLocation(i,"a_minus"),c=t.getUniformLocation(i,"u_resolution"),m=t.getUniformLocation(i,"u_matrix"),f=t.getUniformLocation(i,"u_matrixHalfPi"),_=t.getUniformLocation(i,"u_matrixHalfPiMinus"),A=t.getUniformLocation(i,"u_ratio"),g=t.getUniformLocation(i,"u_scale");a=t.createBuffer(),t.bindBuffer(t.ARRAY_BUFFER,a),t.bufferData(t.ARRAY_BUFFER,o,t.STATIC_DRAW),t.uniform2f(c,r.width,r.height),t.uniform1f(A,r.ratio/Math.pow(r.ratio,r.settings("edgesPowRatio"))),t.uniform1f(g,r.scalingRatio),t.uniformMatrix3fv(m,!1,r.matrix),t.uniformMatrix2fv(f,!1,sigma.utils.matrices.rotation(Math.PI/2,!0)),t.uniformMatrix2fv(_,!1,sigma.utils.matrices.rotation(-Math.PI/2,!0)),t.enableVertexAttribArray(e),t.enableVertexAttribArray(n),t.enableVertexAttribArray(l),t.enableVertexAttribArray(s),t.enableVertexAttribArray(u),t.vertexAttribPointer(n,2,t.FLOAT,!1,this.ATTRIBUTES*Float32Array.BYTES_PER_ELEMENT,0),t.vertexAttribPointer(l,2,t.FLOAT,!1,this.ATTRIBUTES*Float32Array.BYTES_PER_ELEMENT,8),t.vertexAttribPointer(s,1,t.FLOAT,!1,this.ATTRIBUTES*Float32Array.BYTES_PER_ELEMENT,16),t.vertexAttribPointer(u,1,t.FLOAT,!1,this.ATTRIBUTES*Float32Array.BYTES_PER_ELEMENT,20),t.vertexAttribPointer(e,1,t.FLOAT,!1,this.ATTRIBUTES*Float32Array.BYTES_PER_ELEMENT,24),t.drawArrays(t.TRIANGLES,r.start||0,r.count||o.length/this.ATTRIBUTES)},initProgram:function(t){var i,o,r;return i=sigma.utils.loadShader(t,["attribute vec2 a_position1;","attribute vec2 a_position2;","attribute float a_thickness;","attribute float a_minus;","attribute float a_color;","uniform vec2 u_resolution;","uniform float u_ratio;","uniform float u_scale;","uniform mat3 u_matrix;","uniform mat2 u_matrixHalfPi;","uniform mat2 u_matrixHalfPiMinus;","varying vec4 color;","void main() {","vec2 position = a_thickness * u_ratio *","normalize(a_position2 - a_position1);","mat2 matrix = a_minus * u_matrixHalfPiMinus +","(1.0 - a_minus) * u_matrixHalfPi;","position = matrix * position + a_position1;","gl_Position = vec4(","((u_matrix * vec3(position, 1)).xy /","u_resolution * 2.0 - 1.0) * vec2(1, -1),","0,","1",");","float c = a_color;","color.b = mod(c, 256.0); c = floor(c / 256.0);","color.g = mod(c, 256.0); c = floor(c / 256.0);","color.r = mod(c, 256.0); c = floor(c / 256.0); color /= 255.0;","color.a = 1.0;","}"].join("\n"),t.VERTEX_SHADER),o=sigma.utils.loadShader(t,["precision mediump float;","varying vec4 color;","void main(void) {","gl_FragColor = color;","}"].join("\n"),t.FRAGMENT_SHADER),r=sigma.utils.loadProgram(t,[i,o])}}}();