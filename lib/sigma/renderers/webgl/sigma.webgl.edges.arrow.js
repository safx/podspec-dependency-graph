!function(){"use strict";sigma.utils.pkg("sigma.webgl.edges"),sigma.webgl.edges.arrow={POINTS:9,ATTRIBUTES:11,addEdge:function(t,a,o,r,i,e,n){var l=(t[e+"size"]||1)/2,s=a[e+"x"],_=a[e+"y"],u=o[e+"x"],A=o[e+"y"],c=o[e+"size"],f=t.color;if(!f)switch(n("edgeColor")){case"source":f=a.color||n("defaultNodeColor");break;case"target":f=o.color||n("defaultNodeColor");break;default:f=n("defaultEdgeColor")}f=sigma.utils.floatColor(f),r[i++]=s,r[i++]=_,r[i++]=u,r[i++]=A,r[i++]=l,r[i++]=c,r[i++]=0,r[i++]=0,r[i++]=0,r[i++]=0,r[i++]=f,r[i++]=u,r[i++]=A,r[i++]=s,r[i++]=_,r[i++]=l,r[i++]=c,r[i++]=1,r[i++]=1,r[i++]=0,r[i++]=0,r[i++]=f,r[i++]=u,r[i++]=A,r[i++]=s,r[i++]=_,r[i++]=l,r[i++]=c,r[i++]=1,r[i++]=0,r[i++]=0,r[i++]=0,r[i++]=f,r[i++]=u,r[i++]=A,r[i++]=s,r[i++]=_,r[i++]=l,r[i++]=c,r[i++]=1,r[i++]=0,r[i++]=0,r[i++]=0,r[i++]=f,r[i++]=s,r[i++]=_,r[i++]=u,r[i++]=A,r[i++]=l,r[i++]=c,r[i++]=0,r[i++]=1,r[i++]=0,r[i++]=0,r[i++]=f,r[i++]=s,r[i++]=_,r[i++]=u,r[i++]=A,r[i++]=l,r[i++]=c,r[i++]=0,r[i++]=0,r[i++]=0,r[i++]=0,r[i++]=f,r[i++]=u,r[i++]=A,r[i++]=s,r[i++]=_,r[i++]=l,r[i++]=c,r[i++]=1,r[i++]=0,r[i++]=1,r[i++]=-1,r[i++]=f,r[i++]=u,r[i++]=A,r[i++]=s,r[i++]=_,r[i++]=l,r[i++]=c,r[i++]=1,r[i++]=0,r[i++]=1,r[i++]=0,r[i++]=f,r[i++]=u,r[i++]=A,r[i++]=s,r[i++]=_,r[i++]=l,r[i++]=c,r[i++]=1,r[i++]=0,r[i++]=1,r[i++]=1,r[i++]=f},render:function(t,a,o,r){var i,e=t.getAttribLocation(a,"a_pos1"),n=t.getAttribLocation(a,"a_pos2"),l=t.getAttribLocation(a,"a_thickness"),s=t.getAttribLocation(a,"a_tSize"),_=t.getAttribLocation(a,"a_delay"),u=t.getAttribLocation(a,"a_minus"),A=t.getAttribLocation(a,"a_head"),c=t.getAttribLocation(a,"a_headPosition"),f=t.getAttribLocation(a,"a_color"),m=t.getUniformLocation(a,"u_resolution"),E=t.getUniformLocation(a,"u_matrix"),T=t.getUniformLocation(a,"u_matrixHalfPi"),b=t.getUniformLocation(a,"u_matrixHalfPiMinus"),d=t.getUniformLocation(a,"u_ratio"),g=t.getUniformLocation(a,"u_nodeRatio"),x=t.getUniformLocation(a,"u_arrowHead"),P=t.getUniformLocation(a,"u_scale");i=t.createBuffer(),t.bindBuffer(t.ARRAY_BUFFER,i),t.bufferData(t.ARRAY_BUFFER,o,t.STATIC_DRAW),t.uniform2f(m,r.width,r.height),t.uniform1f(d,r.ratio/Math.pow(r.ratio,r.settings("edgesPowRatio"))),t.uniform1f(g,Math.pow(r.ratio,r.settings("nodesPowRatio"))/r.ratio),t.uniform1f(x,5),t.uniform1f(P,r.scalingRatio),t.uniformMatrix3fv(E,!1,r.matrix),t.uniformMatrix2fv(T,!1,sigma.utils.matrices.rotation(Math.PI/2,!0)),t.uniformMatrix2fv(b,!1,sigma.utils.matrices.rotation(-Math.PI/2,!0)),t.enableVertexAttribArray(e),t.enableVertexAttribArray(n),t.enableVertexAttribArray(l),t.enableVertexAttribArray(s),t.enableVertexAttribArray(_),t.enableVertexAttribArray(u),t.enableVertexAttribArray(A),t.enableVertexAttribArray(c),t.enableVertexAttribArray(f),t.vertexAttribPointer(e,2,t.FLOAT,!1,this.ATTRIBUTES*Float32Array.BYTES_PER_ELEMENT,0),t.vertexAttribPointer(n,2,t.FLOAT,!1,this.ATTRIBUTES*Float32Array.BYTES_PER_ELEMENT,8),t.vertexAttribPointer(l,1,t.FLOAT,!1,this.ATTRIBUTES*Float32Array.BYTES_PER_ELEMENT,16),t.vertexAttribPointer(s,1,t.FLOAT,!1,this.ATTRIBUTES*Float32Array.BYTES_PER_ELEMENT,20),t.vertexAttribPointer(_,1,t.FLOAT,!1,this.ATTRIBUTES*Float32Array.BYTES_PER_ELEMENT,24),t.vertexAttribPointer(u,1,t.FLOAT,!1,this.ATTRIBUTES*Float32Array.BYTES_PER_ELEMENT,28),t.vertexAttribPointer(A,1,t.FLOAT,!1,this.ATTRIBUTES*Float32Array.BYTES_PER_ELEMENT,32),t.vertexAttribPointer(c,1,t.FLOAT,!1,this.ATTRIBUTES*Float32Array.BYTES_PER_ELEMENT,36),t.vertexAttribPointer(f,1,t.FLOAT,!1,this.ATTRIBUTES*Float32Array.BYTES_PER_ELEMENT,40),t.drawArrays(t.TRIANGLES,r.start||0,r.count||o.length/this.ATTRIBUTES)},initProgram:function(t){var a,o,r;return a=sigma.utils.loadShader(t,["attribute vec2 a_pos1;","attribute vec2 a_pos2;","attribute float a_thickness;","attribute float a_tSize;","attribute float a_delay;","attribute float a_minus;","attribute float a_head;","attribute float a_headPosition;","attribute float a_color;","uniform vec2 u_resolution;","uniform float u_ratio;","uniform float u_nodeRatio;","uniform float u_arrowHead;","uniform float u_scale;","uniform mat3 u_matrix;","uniform mat2 u_matrixHalfPi;","uniform mat2 u_matrixHalfPiMinus;","varying vec4 color;","void main() {","vec2 pos = normalize(a_pos2 - a_pos1);","mat2 matrix = (1.0 - a_head) *","(","a_minus * u_matrixHalfPiMinus +","(1.0 - a_minus) * u_matrixHalfPi",") + a_head * (","a_headPosition * u_matrixHalfPiMinus * 0.6 +","(a_headPosition * a_headPosition - 1.0) * mat2(1.0)",");","pos = a_pos1 + (","(1.0 - a_head) * a_thickness * u_ratio * matrix * pos +","a_head * u_arrowHead * a_thickness * u_ratio * matrix * pos +","a_delay * pos * (","a_tSize / u_nodeRatio +","u_arrowHead * a_thickness * u_ratio",")",");","gl_Position = vec4(","((u_matrix * vec3(pos, 1)).xy /","u_resolution * 2.0 - 1.0) * vec2(1, -1),","0,","1",");","float c = a_color;","color.b = mod(c, 256.0); c = floor(c / 256.0);","color.g = mod(c, 256.0); c = floor(c / 256.0);","color.r = mod(c, 256.0); c = floor(c / 256.0); color /= 255.0;","color.a = 1.0;","}"].join("\n"),t.VERTEX_SHADER),o=sigma.utils.loadShader(t,["precision mediump float;","varying vec4 color;","void main(void) {","gl_FragColor = color;","}"].join("\n"),t.FRAGMENT_SHADER),r=sigma.utils.loadProgram(t,[a,o])}}}();